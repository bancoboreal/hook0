name: DEV | Build to ECR and deploy to EKS

on:
  push:
    branches: [develop]
  workflow_dispatch:

env: {}

permissions:
  contents: read
  id-token: write

jobs:
  api-build-push:
    runs-on: ubuntu-latest
    env:
      APP_NAME: hook0-api
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set image metadata
        id: meta
        run: |
          IMAGE_TAG="${{ inputs.image_tag || github.sha }}"
          IMAGE_URI="${{ secrets.AWS_ECR_REGISTRY }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ env.APP_NAME }}:${IMAGE_TAG}"

          echo "image_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "image_uri=${IMAGE_URI}" >> $GITHUB_OUTPUT

          echo "üèóÔ∏è Building image with tag: ${IMAGE_TAG}"
          echo "üì¶ Full image URI: ${IMAGE_URI}"

      - name: Build and push Docker image with cache
        uses: docker/build-push-action@v5
        with:
          context: .
          file: api/Dockerfile
          push: true
          platforms: linux/amd64
          tags: |
            ${{ steps.meta.outputs.image_uri }}
            ${{ secrets.AWS_ECR_REGISTRY }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ env.APP_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build summary
        run: |
          echo "‚úÖ Build completed successfully!"
          echo "üì¶ Image: ${{ steps.meta.outputs.image_uri }}"
          echo "üè∑Ô∏è Tag: ${{ steps.meta.outputs.image_tag }}"

  api-update-manifest:
    runs-on: ubuntu-latest
    env:
      APP_NAME: hook0-api
    outputs:
      image_tag: ${{ steps.meta.outputs.image_tag }}
      image_uri: ${{ steps.meta.outputs.image_uri }}
    steps:
      - name: Install tools
        run: |
          apt update;
          apt install -y git wget;
          wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq;
          chmod +x /usr/local/bin/yq;

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          repository: "${{ github.repository_owner }}/kubernetes-manifests"
          ref: main
          token: ${{ secrets.GH_TOKEN }}

      - name: Set safe directory
        run: git config --global --add safe.directory "$GITHUB_WORKSPACE";

      - name: Set image metadata
        id: meta
        run: |
          IMAGE_TAG="${{ inputs.image_tag || github.sha }}";

          echo "image_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT;

          echo "üèóÔ∏è Building image with tag: ${IMAGE_TAG}";
          echo "üì¶ Full image URI: ${IMAGE_URI}";

      - name: Edit values file
        run: |
          yq -i '.image.tag = "${{ steps.meta.outputs.image_tag }}"' apps/dev/values/${{ env.APP_NAME }}.yaml;

      - name: Commit and push to kubernetes-manifests
        uses: actions-js/push@master
        with:
          repository: "${{ github.repository_owner }}/kubernetes-manifests"
          branch: main
          github_token: ${{ secrets.GH_TOKEN }}

      - name: Deploy summary
        run: |
          echo "‚úÖ Deploy completed successfully!"
          echo "‚öôÔ∏è App: ${{ inputs.manifest_path }}"
          echo "üè∑Ô∏è Tag: ${{ steps.meta.outputs.image_tag }}"

  # build-push-frontend-dev:
  #   uses: .github/actions/build-push.yml
  #   with:
  #     ecr_repository_name: ${{ vars.AWS_ECR_REPOSITORY_NAME || 'hook0-frontend' }}
  #     runs_on: arc-runner-set
  #     dockerfile: frontend/Dockerfile
  #   secrets:
  #     AWS_ECR_REGISTRY: ${{ secrets.AWS_ECR_REGISTRY }}
  #     AWS_REGION: ${{ secrets.AWS_REGION }}
  #     AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_TO_ASSUME }}

  # update-manifest-frontend-dev:
  #   uses: .github/actions/update-manifest.yml
  #   needs: build-push-frontend-dev
  #   with:
  #     manifest_path: apps/dev/values/hook0-frontend.yaml
  #     runs_on: arc-runner-set
  #   secrets:
  #     AWS_ECR_REGISTRY: ${{ secrets.AWS_ECR_REGISTRY }}
  #     AWS_REGION: ${{ secrets.AWS_REGION }}
  #     GH_TOKEN: ${{ secrets.GH_TOKEN }}

  # build-push-output-worker-dev:
  #   uses: .github/actions/build-push.yml
  #   with:
  #     ecr_repository_name: ${{ vars.AWS_ECR_REPOSITORY_NAME || 'hook0-output-worker' }}
  #     runs_on: arc-runner-set
  #     dockerfile: output-worker/Dockerfile
  #   secrets:
  #     AWS_ECR_REGISTRY: ${{ secrets.AWS_ECR_REGISTRY }}
  #     AWS_REGION: ${{ secrets.AWS_REGION }}
  #     AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_TO_ASSUME }}

  # update-manifest-output-worker-dev:
  #   uses: .github/actions/update-manifest.yml
  #   needs: build-push-output-worker-dev
  #   with:
  #     manifest_path: apps/dev/values/hook0-output-worker.yaml
  #     runs_on: arc-runner-set
  #   secrets:
  #     AWS_ECR_REGISTRY: ${{ secrets.AWS_ECR_REGISTRY }}
  #     AWS_REGION: ${{ secrets.AWS_REGION }}
  #     GH_TOKEN: ${{ secrets.GH_TOKEN }}
